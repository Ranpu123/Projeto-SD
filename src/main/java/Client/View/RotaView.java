/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Client.View;

import Client.DataModels.PdiCombo;
import Client.DataModels.RotaTable;
import Client.Util.Session;
import Client.util.HandleRequest;
import Model.Comando;
import Requests.Handler.Handler;
import javax.swing.SwingUtilities;
import Model.PDI;
import Requests.*;
import Response.*;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author vinic
 */
public class RotaView extends javax.swing.JPanel {
    
    RotaTable rotaTable = new RotaTable();
    PdiCombo inicioPdi = new PdiCombo();
    PdiCombo finalPdi = new PdiCombo();
    /**
     * Creates new form RotaView
     */
    public RotaView() {
        initComponents();
        fetchData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        errorLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        inicioLabel = new javax.swing.JLabel();
        inicioCbox = new javax.swing.JComboBox<>();
        fimLabel = new javax.swing.JLabel();
        fimCbox = new javax.swing.JComboBox<>();
        calcRotaBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        errorLabel.setText("Error");
        add(errorLabel, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        inicioLabel.setText("Inicio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 12, 15, 12);
        jPanel1.add(inicioLabel, gridBagConstraints);

        inicioCbox.setModel(inicioPdi);
        inicioCbox.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 13, 15, 13);
        jPanel1.add(inicioCbox, gridBagConstraints);

        fimLabel.setText("Fim");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 12, 15, 12);
        jPanel1.add(fimLabel, gridBagConstraints);

        fimCbox.setModel(finalPdi);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 12, 15, 12);
        jPanel1.add(fimCbox, gridBagConstraints);

        calcRotaBtn.setText("Calcular Rota");
        calcRotaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcRotaBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 12, 15, 12);
        jPanel1.add(calcRotaBtn, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jTable1.setModel(rotaTable);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel2.add(jScrollPane1);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void calcRotaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcRotaBtnActionPerformed
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if(inicioPdi.getSelectedItem() == null || finalPdi.getSelectedItem()== null || inicioPdi.getSelectedItem() == finalPdi.getSelectedItem()){
                    errorLabel.setText("Os nós não podem ser os mesmo.");
                    return;
                }
                
                Long pdi_inicio = ((PDI) inicioPdi.getSelectedItem()).getId();
                Long pdi_final = ((PDI) finalPdi.getSelectedItem()).getId();
                
                HandleRequest.getInstance().makeRequest(new FindRouteRequest(Session.getInstance().getToken(), pdi_inicio, pdi_final), (Response <?> res)->{
                    if(!(res instanceof FindRouteResponse)){
                        return;
                    }
                    List<Comando> comandos = ((FindRouteResponse) res).payload().getComandos();
                    rotaTable.updateData(comandos);
                }, errorLabel::setText);
            }
        });
    }//GEN-LAST:event_calcRotaBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcRotaBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JComboBox<PDI> fimCbox;
    private javax.swing.JLabel fimLabel;
    private javax.swing.JComboBox<PDI> inicioCbox;
    private javax.swing.JLabel inicioLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    private void fetchData(){
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                HandleRequest.getInstance().makeRequest(new FindPOIsRequest(Session.getInstance().getToken()), (Response <?> res)->{
                    if(!(res instanceof FindPOIsResponse)){
                        return;
                    }
                    List<PDI> pdis = new ArrayList<>();
                    pdis = ((FindPOIsResponse)res).payload().getPdis();
                    inicioPdi.updateData(pdis);
                    
                    List<PDI> pdisFiltrados = new ArrayList<>();
                    pdisFiltrados.addAll(pdis);
                    int n = pdisFiltrados.size();
                    for(int i = 0; i < n ; i++){
                        if(!pdisFiltrados.get(i).getAcessivel()){
                            pdisFiltrados.remove(i);
                        }
                    }
                    
                    finalPdi.updateData(pdisFiltrados);
                    
                }, errorLabel::setText);
            }
        });
    }
}
