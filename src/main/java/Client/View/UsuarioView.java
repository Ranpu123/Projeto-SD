/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Client.View;

import Client.DataModels.UserTable;
import Client.Util.Session;
import Client.util.HandleRequest;
import Model.User;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import Requests.*;
import Response.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jwt.JwtHelper;

/**
 *
 * @author vinic
 */
public class UsuarioView extends javax.swing.JPanel {
    private UserTable userTable = new UserTable();
    /**
     * Creates new form UsuarioView
     */
    public UsuarioView() {
        initComponents();
        atualizarTabela();
        showAdmin();
        
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTable1.getSelectedRow();
                    if(selectedRow != -1){
                        User usuario = userTable.getUsuario(selectedRow);
                        if(usuario != null){
                            atualizarForm(usuario);
                        }
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        errorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        emailInput = new javax.swing.JTextField();
        senhaInput = new javax.swing.JPasswordField();
        nomeInput = new javax.swing.JTextField();
        ativoInput = new javax.swing.JCheckBox();
        cadastrarBtn = new javax.swing.JButton();
        atualizarBtn = new javax.swing.JButton();
        deletarBtn = new javax.swing.JButton();
        limparBtn = new javax.swing.JButton();
        registroInput = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        buscaLabel = new javax.swing.JLabel();
        buscaInput = new javax.swing.JTextField();
        buscaBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        deleContaBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());
        add(errorLabel, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Registro");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel1.setText("Email");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Senha");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel4.setText("Nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Tipo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(emailInput, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(senhaInput, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(nomeInput, gridBagConstraints);

        ativoInput.setText("Admin?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(ativoInput, gridBagConstraints);

        cadastrarBtn.setText("Cadastrar");
        cadastrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel2.add(cadastrarBtn, gridBagConstraints);

        atualizarBtn.setText("Atualizar");
        atualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel2.add(atualizarBtn, gridBagConstraints);

        deletarBtn.setText("Deletar");
        deletarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(27, 6, 7, 6);
        jPanel2.add(deletarBtn, gridBagConstraints);

        limparBtn.setText("Limpar");
        limparBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(limparBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(registroInput, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        buscaLabel.setText("Registro:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 9, 12);
        jPanel1.add(buscaLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.insets = new java.awt.Insets(9, 11, 9, 11);
        jPanel1.add(buscaInput, gridBagConstraints);

        buscaBtn.setText("Buscar");
        buscaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 9, 12);
        jPanel1.add(buscaBtn, gridBagConstraints);

        refreshBtn.setText("Atualizar");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 9, 12);
        jPanel1.add(refreshBtn, gridBagConstraints);

        deleContaBtn.setText("Deletar Conta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(deleContaBtn, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setToolTipText("");

        jTable1.setModel(userTable);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            atualizarTabela();
        });
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void limparBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparBtnActionPerformed
        limparForm();
    }//GEN-LAST:event_limparBtnActionPerformed

    private void cadastrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarBtnActionPerformed
       SwingUtilities.invokeLater(() -> {
            cadastrarUsuario();
            atualizarTabela();
            limparForm();
       });
    }//GEN-LAST:event_cadastrarBtnActionPerformed

    private void atualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarBtnActionPerformed
        if(JwtHelper.getAdminStatus(Session.getInstance().getToken())){
            SwingUtilities.invokeLater(() -> {
                admAtualizarUsuario();
                atualizarTabela();
                limparForm();
            });
        }else{
            SwingUtilities.invokeLater(() -> {
                atualizarUsuario();
                atualizarTabela();
                limparForm();
            });
        }
    }//GEN-LAST:event_atualizarBtnActionPerformed

    private void buscaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            buscarUsuario();
        });
    }//GEN-LAST:event_buscaBtnActionPerformed
    
    private void cadastrarUsuario(){
         HandleRequest.getInstance().makeRequest(new AdminCreateUserRequest(Session.getInstance().getToken() ,nomeInput.getText(), 
                   emailInput.getText(), new String(senhaInput.getPassword()), ativoInput.isSelected()), (Response <?> res) -> {
                       if(!(res instanceof AdminCreateUserResponse)){
                           return;
                       }
           }, errorLabel::setText);
    }
    
    private void buscarUsuario(){
        int registro = 0;
        try{
            registro = Integer.parseInt(buscaInput.getText());
            HandleRequest.getInstance().makeRequest(new AdminFindUserRequest(Session.getInstance().getToken(), registro), (Response <?> res) -> {
                if(!(res instanceof AdminFindUserResponse)){
                    return;
                }
                List<User> usuarios = new ArrayList<>();
                User usuario = new User(((FindUserResponse)res).payload().getRegistro(), ((FindUserResponse)res).payload().getEmail()
                        , null, ((FindUserResponse)res).payload().getNome(), ((FindUserResponse)res).payload().getTipo());
                usuarios.add(usuario);
                userTable.updateData(usuarios);
            }, errorLabel::setText);
        }catch(NumberFormatException e){
            errorLabel.setText("Erro Conversão Inteiro da Busca. " + e);
        }    
    }
    
    private void deletarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            deletarUsuario();
            atualizarTabela();
            limparForm();
        });
    }//GEN-LAST:event_deletarBtnActionPerformed
    
    private void deletarUsuario(){
        int registro = 0;
        try{
            registro = Integer.parseInt(registroInput.getText());
            HandleRequest.getInstance().makeRequest(new AdminDeleteUserRequest(Session.getInstance().getToken(), registro), (Response <?> res) -> {
                if(!(res instanceof AdminDeleteUserResponse)){
                    return;
                }
                errorLabel.setText(((AdminDeleteUserResponse)res).payload().getMensagem());
            }, errorLabel::setText);
        }catch(NumberFormatException e){
            errorLabel.setText("Erro Conversão Inteiro do Registro. " + e );
        }
    }
    
    private void admAtualizarUsuario(){
        int registro = 0;
        try{
            registro = Integer.parseInt(registroInput.getText());
            String nome = nomeInput.getText().isBlank()? null : nomeInput.getText();
            String email = emailInput.getText().isBlank()? null : emailInput.getText();
            String senha = new String(senhaInput.getPassword());
            senha = senha.isBlank()? null : senha;

            HandleRequest.getInstance().makeRequest(new AdminUpdateUserRequest(Session.getInstance().getToken(), registro, nome, 
                           email, senha, ativoInput.isSelected()), (Response <?> res) -> {
                               if(!(res instanceof AdminCreateUserResponse)){
                                   return;
                               }
                   }, errorLabel::setText);
        }catch(NumberFormatException e){
            errorLabel.setText("Erro Conversão Inteiro do Registro. "+ e);
        }
    }
    
    private void atualizarUsuario(){
        String nome = nomeInput.getText().isBlank()? null : nomeInput.getText();
        String email = emailInput.getText().isBlank()? null : emailInput.getText();
        String senha = new String(senhaInput.getPassword());
        senha = senha.isBlank()? null : senha;
        
        HandleRequest.getInstance().makeRequest(new UpdateUserRequest(Session.getInstance().getToken(), nome, 
                       email, senha), (Response <?> res) -> {
                           if(!(res instanceof UpdateUserResponse)){
                               return;
                           }
               }, errorLabel::setText);
    }
    
    private void atualizarForm(User usuario){
        registroInput.setText(String.valueOf(usuario.getRegistro()));
        emailInput.setText(usuario.getEmail());
        nomeInput.setText(usuario.getNome());
        ativoInput.setSelected(usuario.isTipo());
    }
    
    private void limparForm(){
        registroInput.setText("");
        emailInput.setText("");
        senhaInput.setText("");
        nomeInput.setText("");
        ativoInput.setSelected(false);
    }
    
    private void atualizarTabela(){
        if(JwtHelper.getAdminStatus(Session.getInstance().getToken())){
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    HandleRequest.getInstance().makeRequest(new AdminFindUsersRequest(Session.getInstance().getToken()), (Response <?> res) -> {
                        if(!(res instanceof AdminFindUsersResponse)){
                            return;
                        }
                        List<User> usuarios = new ArrayList<>();
                        usuarios =  ((AdminFindUsersResponse)res).payload().getUsuarios();
                        userTable.updateData(usuarios);
                    }, errorLabel::setText);
                }
            });
        }else{
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    HandleRequest.getInstance().makeRequest(new FindUserRequest(Session.getInstance().getToken()), (Response <?> res) -> {
                        if(!(res instanceof FindUserResponse)){
                            return;
                        }
                        List<User> usuarios = new ArrayList<>();
                        User usuario = new User(((FindUserResponse)res).payload().getRegistro(), ((FindUserResponse)res).payload().getEmail()
                                , null, ((FindUserResponse)res).payload().getNome(), ((FindUserResponse)res).payload().getTipo());
                        usuarios.add(usuario);
                        userTable.updateData(usuarios);
                    }, errorLabel::setText);
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ativoInput;
    private javax.swing.JButton atualizarBtn;
    private javax.swing.JButton buscaBtn;
    private javax.swing.JTextField buscaInput;
    private javax.swing.JLabel buscaLabel;
    private javax.swing.JButton cadastrarBtn;
    private javax.swing.JButton deleContaBtn;
    private javax.swing.JButton deletarBtn;
    private javax.swing.JTextField emailInput;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limparBtn;
    private javax.swing.JTextField nomeInput;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField registroInput;
    private javax.swing.JPasswordField senhaInput;
    // End of variables declaration//GEN-END:variables
    
    private void showAdmin(){
        if(!(JwtHelper.getAdminStatus(Session.getInstance().getToken()))){
            buscaInput.setVisible(false);
            buscaLabel.setVisible(false);
            buscaBtn.setVisible(false);
            cadastrarBtn.setVisible(false);
            deletarBtn.setVisible(false);
            deletarBtn.setVisible(false);
            ativoInput.setVisible(false);
            jLabel5.setVisible(false);
        }
    }
}

