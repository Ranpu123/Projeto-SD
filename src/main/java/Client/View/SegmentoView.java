/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Client.View;

import Client.DataModels.PdiCombo;
import Client.DataModels.SegmentoTable;
import Client.Util.Session;
import Client.util.HandleRequest;
import Model.PDI;
import Model.Segmento;
import Model.User;
import Requests.*;
import Response.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author vinic
 */
public class SegmentoView extends javax.swing.JPanel {
    
    private SegmentoTable segTable = new SegmentoTable();
    private PdiCombo inicioCm = new PdiCombo();
    private PdiCombo fimCm = new PdiCombo();
    
    /**
     * Creates new form SegmentoView
     */
    public SegmentoView() {
        initComponents();
        SwingUtilities.invokeLater(() -> {
            atualizarTabela();
            atualizarCombo();
        });
        
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTable1.getSelectedRow();
                    if(selectedRow != -1){
                        Segmento seg = segTable.getSegmento(selectedRow);
                        if(seg != null){
                            atualizarForm(seg);
                        }
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        errorLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        atualizarTabela = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        inicioComb = new javax.swing.JComboBox<>();
        fimComb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        avisoInput = new javax.swing.JTextField();
        acessivelInput = new javax.swing.JCheckBox();
        cadastrarBtn = new javax.swing.JButton();
        atualizarBtn = new javax.swing.JButton();
        deletarBtn = new javax.swing.JButton();
        limparBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        errorLabel.setText("error");
        add(errorLabel, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        atualizarTabela.setText("Atualizar");
        atualizarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarTabelaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(atualizarTabela, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        inicioComb.setModel(inicioCm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(inicioComb, gridBagConstraints);

        fimComb.setModel(fimCm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(fimComb, gridBagConstraints);

        jLabel1.setText("Inicio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Fim");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Aviso");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(avisoInput, gridBagConstraints);

        acessivelInput.setText("Acess√≠vel ?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(acessivelInput, gridBagConstraints);

        cadastrarBtn.setText("Cadastrar");
        cadastrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(cadastrarBtn, gridBagConstraints);

        atualizarBtn.setText("Atualizar");
        atualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(atualizarBtn, gridBagConstraints);

        deletarBtn.setText("Deletar");
        deletarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 7, 7, 7);
        jPanel2.add(deletarBtn, gridBagConstraints);

        limparBtn.setText("Limpar");
        limparBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(limparBtn, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jTable1.setModel(segTable);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.add(jScrollPane1);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cadastrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            cadastrarSegmento();
            atualizarTabela();
            atualizarCombo();
        });
    }//GEN-LAST:event_cadastrarBtnActionPerformed

    private void atualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            atualizarSegmento();
            atualizarTabela();
            atualizarCombo();
        });
    }//GEN-LAST:event_atualizarBtnActionPerformed

    private void deletarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarBtnActionPerformed
        SwingUtilities.invokeLater(() -> {
            deletarSegmento();
            atualizarTabela();
            atualizarCombo();
        });
    }//GEN-LAST:event_deletarBtnActionPerformed

    private void limparBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparBtnActionPerformed
        limparForm();
    }//GEN-LAST:event_limparBtnActionPerformed

    private void atualizarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarTabelaActionPerformed
        SwingUtilities.invokeLater(() -> {
            atualizarTabela();
            atualizarCombo();
        });
    }//GEN-LAST:event_atualizarTabelaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox acessivelInput;
    private javax.swing.JButton atualizarBtn;
    private javax.swing.JButton atualizarTabela;
    private javax.swing.JTextField avisoInput;
    private javax.swing.JButton cadastrarBtn;
    private javax.swing.JButton deletarBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JComboBox<PDI> fimComb;
    private javax.swing.JComboBox<PDI> inicioComb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limparBtn;
    // End of variables declaration//GEN-END:variables
    
    private void atualizarTabela(){
        HandleRequest.getInstance().makeRequest(new FindSegmentsRequest(Session.getInstance().getToken()), (Response <?> res) -> {
            if(!(res instanceof FindSegmentsResponse)){
                return;
            }
            List<Segmento> segs = new ArrayList<>();
            segs =  ((FindSegmentsResponse)res).payload().getSegmentos();
            segTable.updateData(segs);
        }, errorLabel::setText);
    }
    
    private void atualizarCombo(){
        HandleRequest.getInstance().makeRequest(new FindPOIsRequest(Session.getInstance().getToken()), (Response <?> res)->{
            if(!(res instanceof FindPOIsResponse)){
                return;
            }
            List<PDI> pdis = new ArrayList<>();
            pdis = ((FindPOIsResponse)res).payload().getPdis();
            inicioCm.updateData(pdis);
            fimCm.updateData(pdis);
        }, errorLabel::setText);
    }
    
    private void limparForm(){
        avisoInput.setText("");
        acessivelInput.setSelected(false);
        inicioComb.setSelectedIndex(-1);
        fimComb.setSelectedIndex(-1);
        fimComb.updateUI();
        inicioComb.updateUI();
    }
    
    private void cadastrarSegmento(){
        if(inicioCm.getSelectedItem() != null && fimCm.getSelectedItem() != null){
            Long pdi_inicio = ((PDI)inicioCm.getSelectedItem()).getId();
            Long pdi_final = ((PDI)fimCm.getSelectedItem()).getId();
            String aviso = avisoInput.getText();
            Boolean acessivel = acessivelInput.isSelected();
            
            HandleRequest.getInstance().makeRequest(new CreateSegmentRequest(Session.getInstance().getToken(), pdi_inicio, pdi_final, aviso, acessivel), (Response<?> res) -> {
                if(!(res instanceof CreateSegmentResponse)){
                    return;
                }
            }, errorLabel::setText);
        }else{
            errorLabel.setText("Selecione um PDI v√°lido.");
        }
    }
    
    private void atualizarSegmento(){
        if(inicioCm.getSelectedItem() != null && fimCm.getSelectedItem() != null){
            Long pdi_inicio = ((PDI)inicioCm.getSelectedItem()).getId();
            Long pdi_final = ((PDI)fimCm.getSelectedItem()).getId();
            String aviso = avisoInput.getText().isBlank() ? null : avisoInput.getText();
            Boolean acessivel = acessivelInput.isSelected();
            
            HandleRequest.getInstance().makeRequest(new UpdateSegmentRequest(Session.getInstance().getToken(), pdi_inicio, pdi_final, aviso, acessivel), (Response<?> res) -> {
                if(!(res instanceof UpdateSegmentResponse)){
                    return;
                }
            }, errorLabel::setText);
        }else{
            errorLabel.setText("Selecione um PDI v√°lido.");
        }
    }
    
    private void deletarSegmento(){
        if(inicioCm.getSelectedItem() != null && fimCm.getSelectedItem() != null){
            Long pdi_inicio = ((PDI)inicioCm.getSelectedItem()).getId();
            Long pdi_final = ((PDI)fimCm.getSelectedItem()).getId();
            
            HandleRequest.getInstance().makeRequest(new DeleteSegmentRequest(Session.getInstance().getToken(), pdi_inicio, pdi_final), (Response<?> res) -> {
                if(!(res instanceof DeleteSegmentResponse)){
                    return;
                }
                errorLabel.setText(((DeleteSegmentResponse)res).payload().getMensagem());
            }, errorLabel::setText);
        }else{
            errorLabel.setText("Selecione um PDI v√°lido.");
        }
    }
    
    private void atualizarForm(Segmento seg){
        List<PDI> pdis = inicioCm.getPdis();
        boolean flag = false;
        for (PDI pdi : pdis) {
            if (pdi.getId().equals(seg.getPdi_inicial())) {
                inicioComb.setSelectedItem(pdi);
                inicioComb.updateUI();
                if(flag){
                    break;
                }else{
                    flag = true;
                }
            }
            if (pdi.getId().equals(seg.getPdi_final())) {
                fimCm.setSelectedItem(pdi);
                fimComb.updateUI();
                if(flag){
                    break;
                }else{
                    flag = true;
                }
            }
        }
        
        avisoInput.setText(seg.getAviso());
        acessivelInput.setSelected(seg.getAcessivel());
    }
}
